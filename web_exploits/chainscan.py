import os
import subprocess
import sys
import collections
import requests


class ChainScan:

    def __init__(self,args):
        self.host = args[1]
        self.args = args
        self.ports = {}
        self.http_ports = {'http':[],'https':[]}
        self.urls = []
        #execute inputted commands

        #nmap is mandatory
        self.nmap()
        for i in range(2,len(args)):
            f = 'self.{}()'.format(args[i])
            print('############## Starting {} ###############'.format(args[i]))
            eval(f)
        

    def nmap(self):
        start = input('Start NMAP? [y]/[n]')
        
        if start == 'y':
            #current directory
            command = subprocess.run('pwd', shell=True, check=True, text=True)

            #run nmap command
            command = subprocess.run('nmap -T4 -Pn -oN nmap.txt {}'.format(self.host), shell=True, check=True, text=True)
            
            #grep for all open ports and make it into a readable dictionary
            output = subprocess.check_output("cat nmap.txt | grep open", shell=True)
            print(output)
            string_output = output.decode('utf-8')
            results = string_output.split('\n')
            services_dict = collections.defaultdict(list)
            #store results in a dictionary
            for i in range(len(results)-1):
                port, status, service = results[i].split()
                services_dict[service].append((port.split('/')[0],status))
                if service[:5] == 'https':
                    self.http_ports['https'].append(port.split('/')[0])
                elif service[:4] == 'http':
                    self.http_ports['http'].append(port.split('/')[0])
            self.ports = services_dict
            #print(self.ports)
        else:
            exit(0)
            
    def nikto(self):
        start = input('Start NIKTO? [y]/[n]')
        if start == 'y':

            for service in self.http_ports.keys():
                for port in self.http_ports[service]:
                    command = subprocess.run('nikto -host {} -port {}'.format(self.host,port), shell=True, check=True, text=True)

        else:
            exit(0)

    def dirbuster(self):
        #make url
        print("Starting Dir Scanner")
        wordlist = input("Input Path of the wordlist (enter for default)")
        if not wordlist:
            wordlist = '/opt/dirbuster/directory-list-2.3-medium.txt'
        fo = open(wordlist,"r+")
        
        def dirscan(url):
            for i in range(2000):
                word = fo.readline(10).strip()
                complete_url = url + word +'/'
                #print("Trying:" + complete_url)
                response = requests.get(complete_url)
                if response.status_code == 200:
                    print("Found:", response)
                    self.urls.append(complete_url)

        for service in self.http_ports.keys():
            for port in self.http_ports[service]:
                url = '{}://{}:{}/'.format(service,self.host,port)
                cont = input('Would you like to continue with {} [y]/[n]?'.format(url))
                if cont == 'y':
                    dirscan(url)
                else:
                    continue
        print("URL Found:")
        print(self.urls)

    def curl(self):
        for u in self.urls:
            command = subprocess.run('curl -kv {}'.format(u) ,shell=True, check=True, text=True)

    
    def fuzz(self):
        pass